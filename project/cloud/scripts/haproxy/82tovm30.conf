# On Aloha, the global section is already setup for you
# and the paproxy stats socket is available at /var/run/haproxy.stats
global
	stats socket ./haproxy82.stats level admin
	log 127.0.0.1 local3

# default options
defaults
	option http-server-close
	mode http
	log global
	timeout connect 5s
	timeout client 20s
	timeout server 15s
	timeout check 1s
	timeout http-keep-alive 1s
	timeout http-request 10s	# slowloris protection
	default-server inter 3s fall 2 rise 2 slowstart 60s

# HAProxy's stats
listen stats
	bind *:8882
	stats enable
	stats hide-version
	stats uri    	/
	stats realm	HAProxy\ Statistics
	stats auth	admin

# main frontend dedicted to end users
#frontend ft_web
#	bind *:80
#	acl static_content path_end .jpg .gif .png .css .js .htm .html .jsp
#	acl echoii_img_path path_sub /image/get_image
#	acl pseudo_static path_end .php ! path_beg /dynamic/
#	acl image_php path_beg /images.php
#	acl varnish_available nbsrv(bk_varnish_uri) ge 1
	# Caches health detection + routing decision
#	use_backend bk_varnish_uri if varnish_available static_content
#	use_backend bk_varnish_uri if varnish_available echoii_img_path
#	use_backend bk_appsrv_static if echoii_img_path
#	default_backend bk_appsrv

# frontend used by Varnish servers when updating their cache
frontend ft_web_static
	bind *:82
#	acl appsrv_static_unavaiable nbsrv(bk_appsrv_static) eq 0 
#	acl static_content path_end .jpg .gif .png .css .js .htm .html .jsp
#        acl echoii_img_path path_sub /media/	
#	monitor-uri	/haproxycheck
	# Tell Varnish to stop asking for static content when servers are dead
	# Varnish would deliver staled content
#	monitor fail if appsrv_static_unavaiable
#	use_backend bk_appsrv if static_content 
#	use_backend bk_appsrv_static if echoii_img_path
	option forwardfor except 127.0.0.1
	#default_backend bk_appsrv
	default_backend bk_appsrv_media

# appsrv backend for dynamic content
backend bk_appsrv
	balance roundrobin
	# app servers must say if everything is fine on their side and they can process requests
	option httpchk
	option httpchk HEAD /index.jsp
	http-check expect status 200
#	cookie SERVERID insert indirect nocache
	# Transparent proxying using the client IP from the TCP connection
#	source 192.168.1.16 usesrc clientip
	#server s1 172.16.1.30:8080 check maxconn 500
	#server s2 172.16.1.30:8080 check maxconn 500
	option forwardfor
	server s1 172.16.1.114:8080 check maxconn 1000

# static backend with balance based on the uri,
# including the query string to avoid caching an object on several caches
backend bk_varnish_uri
	balance uri	# in latest HAProxy version, one can add 'whole' keyword
	# Varnish must tell it's ready to accept traffic
	option httpchk
	option httpchk HEAD /varnishcheck.txt
	http-check expect status 200
	# Client IP information
	option forwardfor
	# avoid request redistribution when the number fo caches changes (crash or start up)
	hash-type consistent
	server varnish1 172.16.1.8:80 check maxconn 1000

# cache backend with balance based on the value of the URL parameter called "id"
# to avoid caching an object on several caches
#backend bk_varnish_param

# appsrv backend used by Varnish to update their cache
backend bk_appsrv_media
	balance roundrobin
	# anything different than a status code 200 on the URL /staticcheck.txt must be considered as an error
#	option httpchk
#	option httpchk HEAD /index.php
#	http-check expect status 200
	# Transparent proxying using the client IP provided by X-Forwarded-For header
	#source 192.168.1.16 usesrc hdr_ip(X-Forwarded-For)
	#source 192.168.1.16 usesrc hdr_ip(x-forwarded-for)
	server s1 172.16.1.30:80 check maxconn 500 #slowstart 10s
	#server s1 192.168.1.18:8080 check maxconn 500 #slowstart 10s
	#server s2 192.168.1.19:8080 check maxconn 500 #slowstart 10s
